<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_3d_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>z = 0;//the feet
height = 8;
dir = 0
pitch = 0;

zspeed = 0;
zgravity = 1;

onGround = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// This is a testobject. You can see how the eyes move based on the oculus
/*
calcdir = cam_fps.direction+90
if calcdir &gt; 360 {
    calcdir-=360
}
*/
r = cam_fps.es/2
hdir = cam_fps.direction+90;
vdir = cam_fps.roll;

xadd = r*cos(degtorad(hdir))*cos(degtorad(vdir));
yadd = -r*sin(degtorad(hdir))*cos(degtorad(vdir));
zadd = r*sin(degtorad(vdir));

/*
=lengthdir_x_3d(calcdir,cam_fps.roll,cam_fps.es/2);
yadd=lengthdir_y_3d(calcdir,cam_fps.roll,cam_fps.es/2);
zadd=lengthdir_z_3d(calcdir,cam_fps.roll,cam_fps.es/2);
*/

xfrom = x+xadd
yfrom = y+yadd
zfrom = height+zadd

d3d_draw_ellipsoid(xfrom-2,yfrom-2,zfrom-2,xfrom+2,yfrom+2,zfrom+2,global.TEX[TEX_TEST],1,1,12);


xfrom = x-xadd
yfrom = y-yadd
zfrom = height-zadd

d3d_draw_ellipsoid(xfrom-2,yfrom-2,zfrom-2,xfrom+2,yfrom+2,zfrom+2,global.TEX[TEX_TEST],1,1,12);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,8</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
